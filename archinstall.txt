## Archlinux installation

# keyboard setting
$ localectl list-keymaps | grep latin1
$ loadkeys <name-keymap>

# connect to wifi
$ iwctl
[iwctl]# device list 
wlano		# wireless interface name
[iwctl]# station <wlan0> get-networks
[iwctl]# station <wlan0> connect <"wifi-name">
[iwctl]# exit
ip addr show		# check ip address for wireless interface
$ ping -c 5 archlinux.org

# connect vis ssh
$ passwd 		# set root passwd
$ ssh root@<ip-addr>

# time date setup
$ timedatectl
$ timedatectl list-timezones | grep Berlin
$ timedatectl set-timezone Europe/Berlin

-----------------------------------------------------------------------------
# setup disk partition
$ lsblk
# check if my machine is efi or not
$ ls /sys/firmware/efi/efivars		# if content display then mac in EFI

# use fdisk /dev/partition or gdisk /dev/partition
$ fdisk /dev/nvme1n1

# Create a new partition 1 of type "EFI filesystem" and of size 500MiB 
$ g	# create a new GPT disklabel
$ n	# new partition
$ 1	# Partition number (default)
$ 2048	# First sector (default)
$ +500M	# Last sector
$ t	# Partition type
$ 1	# partition type (1 is for EFI System)

# Create a new partition 2 of type "Linux filesystem" and of size 800GB
$ g       # create a new GPT disklabel
$ n       # new partition
$ 2       # Partition number (default)
$ 1026048    # First sector (default)
$ +800G   # Last sector
$ t       # Partition type
$ 2	# Partition number (default)
$ 30       # partition type (30 is for LVM System)

$ p	# print partition table just created
$ w	# write partition table on the disk
-----------------------------------------------------------------------------
# OPTION 2 : UEFI with encryption partition setup

$ mkfs.fat -F32 /dev/nvme1n1p1 	# format the first partition

$ cryptsetup luksFormat /dev/nvme1n1p3
Are you sure? YES
Enter passphrase for /dev/nvme1n1p3: *****
Verify passphrase: *****

# Unlock encrypted partition
$ cryptsetup open --type luks /dev/nvme1n1p3 lvm
Enter passphrase for /dev/nvme1n1p3:

$ pvcreate --dataalignment 1m /dev/mapper/lvm
$ vgcreate volgroup0 /dev/mapper/lvm

$ lvcreate -L 300GB volgroup0 -n lv_root
$ lvcreate -l 100%FREE volgroup0 -n lv_home	# small 'l'

$ modprobe dm_mod
$ vgscan
$ vgchange -ay

$ mkfs.ext4 /dev/volgroup0/lv_root
$ mount /dev/volgroup0/lv_root /mnt

$ mkdir /mnt/boot 
$ mount /dev/nvme1n1p1 /mnt/boot

$ mkfs.ext4 /dev/volgroup0/lv_home
$ mkdir /mnt/home
$ mount /dev/volgroup0/lv_home /mnt/home
---------------------------------------------------------------------------------------------------------

# OPTION 3: btrfs partition setup

$ mount /dev/nvme1n1p1 /mnt

$ cd /mnt
$ btrfs subvolume create @
$ btrfs subvolume create @home
$ cd ..
$ umount /mnt

$ mount -o noatime,ssd,space_cache=v2,compress=zstd,discard=async,subvol=@ /dev/nvme1n1p1 /mnt

$ mkdir /mnt/home
$ mount -o noatime,ssd,space_cache=v2,compress=zstd,discard=async,subvol=@home /dev/nvme1n1p1 /mnt/home
------------------------------------------------------------------------------------------------------------
# generate fstab
$ mkdir /mnt/etc
$ genfstab -U -p /mnt >> /mnt/etc/fstab
$ cat /mnt/etc/fstab	# check mounted partition on fstab

$ reflector --country Germany --age 6 --sort rate --save /etc/pacman.d/mirrorlist
$ pacman -Sy

$ pacstrap -K /mnt base linux linux-firmware intel-ucode btrfs-progs vim
--------------------------------------------------------------------------------------

$ arch-chroot /mnt

$ mkdir -p /mnt/boot/efi
$ mount /dev/nvme0n1p1 /mnt/boot/efi
-------------------------------------------------------------------------------------------------------------

$ ln -sf /usr/share/zoninfo/Europe/Berlin /etc/localtime
 
$ echo "LANG=en_US.UTF-8" >> /etc/locale.conf
$ echo "KEYMAP=en_DE-latin1" >> /etc/vconsole.conf

$ vim /etc/hostname
arch
$ passwd

$ pcman -S linux linux-headers linux-lts linux-lts-headers

$ pacman -S base-devel openssh
$ systemctl enable sshd

$ pacman -S networkmanager wpa_supplicant wireless_tools netctl dialog
$ systemctl enable NetworkManager

$ pacman -S lvm2

$ vim /etc/mkinitcpio.conf
HOOKS=(base udev autodetect modconf block encrypt lvm2 filesystems keyboard fs  # add encrypt lvm2
$ mkinitcpio -p linux
$ mkinitcpio -p linux-lts

$ pacman -S grub efibootmgr networkmanager network-manager-applet dialog wpa_supplicant mtools dosfstools reflector base-devel linux-headers bluez  bluez-utils cups hplip alsa-utils pipewire pipewire-alsa pipewire-pulse pipewire-jack bash-completion openssh rsync acpi acpi_call tlp sof_firmware acpid os-prober ntfs-3g nvidia nvida-utils nvidia-settings man

grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB

grub-mkconfig -o /boot/grub/grub.cfg

enable os-prober
vim /etc/default/grub 	# uncomment GRUB_DISABLE_OS_PROBER=false
grub-mkconfig -o /boot/grub/grub.cfg

systemctl enable NetworkManager
systemctl enable bluetooth
systemctl enable cups
systemctl enable sshd
systemctl enable tlp
systemctl enable reflector.timer
systemctl enable fstrim.timer
systemctl enable acpid

$ hwclock --systohc
$ vim /etc/locale.gen		#uncommnet en_US.UTF=8 UTF-8
$ locale-gen

# create new usr
$ useradd -m -g users -G wheel tomar
$ passwd tomar

$ EDITOR=nano visudo
%wheel ALL=(ALL) ALL	# uncomment this line

$ usermod -c 'Puneet Tomar' tomar	# show full name instead of username on login

$ pacman -S grub efibootmgr dosfstools os-prober mtools


exit

umount -R /mnt

reboot

## after reboot 

nmuti 	# Activate connection

sudo grub-mkconfig -o /boot/grub/grub.cfg 	# it should detect windows boot manager as well
sudo pacman -S git

$ git clone https://aur.archlinux.org/yay-bin

$ cd yay-bin
$ makepkg -si

$ yay -S timeshift-bin timeshift-autosnap

$ sudo timeshift --list-devices

$ sudo timeshift --snapshot-devices

$ sudo timeshift --create --comments "FIrst backup" --tags D

# btrfs record snapstop automatically on system update/upgrade
$ grub-mkconfig -o /boot/grub/grub.cfg		# this will record timeshift snapshot as well

